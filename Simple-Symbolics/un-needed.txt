
    
    let rec mapSumOrProductRec fx =
        function
        | Sum l -> Sum (List.map (mapSumOrProductRec fx) l)
        | Product l -> Product (List.map (mapSumOrProductRec fx) l)
        | Function(fn, f) -> fx (Function(fn, (mapSumOrProductRec fx f)))
        | Power(x,n) -> fx (Power(mapSumOrProductRec fx x, n))
        | FunctionN(fn, parameters) ->
            fx (FunctionN(fn, List.map (mapSumOrProductRec fx) parameters))
        | x -> fx x
        
    ///Map the first N while also applying a filter
    let mapfirstNF n filter map expr =
        let mutable count = 0
        recursiveMapFilter (fun x -> count < n && filter x) (function
            | f when count < n ->
                let f' = map f
                if f' <> f then count <- count + 1
                f'
            | f -> f) expr

    let mapfirstN n map expr = mapfirstNF n (konst true) map expr

    let mapJustFirstF filter map expr = mapfirstNF 1 filter map expr

    let mapJustFirst map expr = mapfirstN 1 map expr

    let skipfirstNThenMapF n filter map expr =
        let mutable skipCount = 0
        recursiveMapFilter (fun x ->
            let t = filter x
            if t then skipCount <- skipCount + 1
            skipCount > n && t) map expr

    let skipfirstNThenMap n map expr = skipfirstNThenMapF n (konst true) map expr

    let skipfirstNThenMapMF n m filter map expr =
        let mutable count = 0
        let mutable skipCount = 0
        recursiveMapFilter
            (fun x ->
                let t = filter x
                if t then skipCount <- skipCount + 1
                skipCount > n && t && count < n)
            (function
            | f when count < m ->
                let f' = map f
                if f' <> f then count <- count + 1
                f'
            | f -> f)
            expr


==========================================


An over elaborated way to check if negative
    let isNegative =
        function
        | Number n -> n < 0N
        | Constant _   
        | Power(Constant _, Constant _) 
        | Power(Constant _, _) -> false
        | Approximation (Real a) ->  a < 0.
        | Power(Number n, Number p) -> n < 0N && abs(int p) % 2 <> 0  
        | Power(Approximation (Real r), Number p) -> r < 0. && abs(int p) % 2 <> 0  
        | Power(Number n, Constant _)
        | Product [ Number n; Constant _ ] -> n < 0N
        | _ -> false

====

Duplicated inequality, which is more effort duplication or generic code?

type InEqualityU(comparer:InEquality.Comparer, leq : Units, req : Units) =
    member __.Definition = leq, req
    member __.Left = leq
    member __.Right = req
    member __.Comparer = comparer

    member __.InEqualities =
        [ leq, req
          req, leq ]
    override __.ToString() =
        (Units.simplifyUnits leq) + string comparer + (Units.simplifyUnits req)
    member __.ToStringAs(u:Units) =
        let ul, _ = Units.To(leq, u).Value
        let rl, _ = Units.To(req, u).Value
        ul + string comparer + rl   
    member __.Flip() =
        InEqualityU(InEquality.flipComparer comparer, req, leq) 
    member i.ApplyToRight f = InEqualityU(i.Comparer, i.Left, f i.Right)
    member i.ApplyToLeft f = InEqualityU(i.Comparer, f i.Left, i.Right)
    member i.Apply f = InEqualityU(i.Comparer, f i.Left, f i.Right)
    static member (+) (eq : InEqualityU, expr : Units) =
        InEqualityU(eq.Comparer, eq.Left + expr, eq.Right + expr)
    static member (+) (eq : InEqualityU, expr : Expression) =
        eq + (expr * Units.unitless)
    static member (-) (eq : InEqualityU, expr : Units) =
        InEqualityU(eq.Comparer, eq.Left - expr, eq.Right - expr)
    static member (/) (eq : InEqualityU, expr : Expression) =
        eq / (expr * Units.unitless)
    static member (/) (eq : InEqualityU, expr : Units) =
        if Expression.isNumber expr.Quantity then
            let c = if Expression.isNegativeNumber expr.Quantity then 
                        InEquality.flipComparer eq.Comparer
                    else eq.Comparer
            InEqualityU(c, eq.Left / expr, eq.Right / expr)
        else eq

type InEqualityU with
    static member applyToRight f (i:InEqualityU) =
        InEqualityU(i.Comparer, i.Left, f i.Right)
    static member applyToLeft f (i:InEqualityU) =
        i.ApplyToLeft f
    static member apply f (i:InEqualityU) = i.Apply f 

let lequ (a:Units) (b:Units) = InEqualityU(InEquality.Comparer.Leq,a,b)
let gequ (a:Units) (b:Units) = InEqualityU(InEquality.Comparer.Geq,a,b)
let ltu (a:Units) (b:Units)  = InEqualityU(InEquality.Comparer.Lesser,a,b)
let gtu (a:Units) (b:Units)  = InEqualityU(InEquality.Comparer.Greater,a,b)  

Generic version: 

type InEquality<'a>(toExpression, zero,times, comparer:InEquality.Comparer, leq : 'a, req : 'a) =
    let conditions = Hashset<InEquality<'a>>()
    let varsigns = Dict<Expression, InEquality.NumSign>()

    member __.Definition = leq, comparer, req
    member __.Left = leq
    member __.Right = req
    member __.Comparer = comparer
    member __.VarSigns = varsigns
    member __.Conditions = Seq.toArray conditions 
    member __.ToExpression = toExpression
    member __.Zero = zero
    member __.Times = times
    member __.GetSign =
        match toExpression req with 
        | IsNumber n ->
            if Expression.isNegativeNumber n then
                Some(InEquality.Negative)
            else Some(InEquality.Positive)
        | _ -> None   

    //override __.ToString() =
        //leq.ToFormattedString() + string comparer + req.ToFormattedString()
        //+ newline() + (Seq.map string conditions |> String.concat (newline()))

    //member __.Flip() =
    //    InEquality(toExpression, zero, InEquality.flipComparer comparer, req, leq) 
    //member i.ApplyToRight f = InEquality(toExpression, zero, i.Comparer, i.Left, f i.Right)
    //member i.ApplyToLeft f = InEquality(toExpression, zero, i.Comparer, f i.Left, i.Right)
    //member i.Apply f = InEquality(toExpression, zero, i.Comparer, f i.Left, f i.Right)
    member i.AddCondition (c:InEquality<_>) = 
        match toExpression c.Left with 
        | Identifier _ as x ->
            match c.GetSign with
            | None -> ()
            | Some s -> varsigns.Add(x, s)
        | _ -> ()
        conditions.Add c |> ignore
    static member decideComparison (eq:InEquality<_>, x: 'a) =
        let expr = eq.ToExpression x
        let isnum = Expression.isNumber expr

        let c, safe =
            match Expression.isNegativeNumber expr, eq.VarSigns.tryFind expr with
            | false, Some InEquality.Negative | true, _ ->
                InEquality.flipComparer eq.Comparer, true
            | false, Some InEquality.Positive | _ when isnum -> eq.Comparer, true
            | _ -> eq.Comparer, false

        if not safe then
            eq.AddCondition(eq.To( InEquality.Comparer.Greater, x, eq.Zero))
        else if not isnum then
            let compop =
                match eq.VarSigns.[expr] with
                | InEquality.Positive -> InEquality.Comparer.Greater
                | InEquality.Negative -> InEquality.Comparer.Lesser
                | _ -> InEquality.Comparer.Geq
            eq.AddCondition(eq.To(compop, x, eq.Zero))
        c
    member i.To(comparer,l,r) = InEquality(toExpression, zero, times, comparer,l,r)
    static member (*) (eq : InEquality<_>, expr:'a) = 
        eq.To(InEquality.decideComparison(eq,expr), eq.Times eq.Left expr, eq.Times eq.Right expr)
    
    //static member (+) (eq : InEquality<_>, expr : 'a) =
    //    InEquality(toExpression, eq.Comparer, eq.Left + expr, eq.Right + expr) 
    //static member (-) (eq : InEquality<_>, expr : 'a) =
    //    InEquality(toExpression, eq.Comparer, eq.Left - expr, eq.Right - expr) 
    //static member (/) (eq : InEquality<_>, expr : 'a) =   
    //    InEquality(toExpression, InEquality.decideComparison(eq,expr), eq.Left / expr, eq.Right / expr) 
         
let leq a b = InEquality(id,0Q, InEquality.Comparer.Leq,a,b)
let geq a b = InEquality(id, 0Q,InEquality.Comparer.Geq,a,b)
let lt a b = InEquality(id, 0Q,InEquality.Comparer.Lesser,a,b)
let gt a b = InEquality(id, 0Q,InEquality.Comparer.Greater,a,b) 

Might be better to go the replace route?

======

Helper for symbolic functions. Not needed.

type Func(?varname, ?expr, ?functionName) =
    static member fn fname = FunctionN(Function.Func, [symbol fname])
    static member make fname = fun x -> FunctionN(Function.Func, [symbol fname; x])
    static member fn (fname,x) = FunctionN(Function.Func, [symbol fname;x])
    static member fn (x) = FunctionN(Function.Func, [symbol "f";x])
    static member fn (fname,x,expr) = FunctionN(Function.Func, [symbol fname;x;expr])
    static member fn (x,expr) = FunctionN(Function.Func, [symbol "f";x;expr])
    static member JustName (fn, ?keepInputVar) =
        match fn, keepInputVar with
         | FunctionN (Function.Func, fname :: _), Some false
         | FunctionN (Function.Func, fname :: _), None -> FunctionN (Function.Func, [fname]) 
         | FunctionN (Function.Func, fname :: x:: _), Some true -> FunctionN (Function.Func, [fname;x]) 
         | e, _ -> e
    static member Internal (fn) =
        match fn with
        | FunctionN (Function.Func, [_;_;x]) -> x
        | e -> e
    static member Apply (f,x) =
        match f with 
        | FunctionN(Function.Func, [Identifier (Symbol fname);Identifier _]) -> funcx fname x
        | FunctionN(Function.Func, [_;Identifier _ as y;expr]) ->
            Expression.replaceExpression x y expr
        | _ -> failwith "Not a function"
    member __.Function =
        match (varname,expr, functionName) with
        | None, None, Some (f:string) -> Func.fn f
        | Some xb, None, Some f -> Func.fn(f,xb)
        | Some xb, Some e, Some f -> Func.fn(f,xb,e)
        | Some xb, Some e, None -> Func.fn("f",xb,e)
        | None, Some e, None -> Func.fn("f",Vars.x,e)
        | _ -> failwith "error in function created"

    member __.Run(params) = 
        match(expr) with
        | None -> None 
        | Some e -> Expression.evaluateFloat params e
    member f.Apply(x) = Func.Apply(f.Function, x)
 

========


let rec replaceVariableSymbol replacer =
    function
    | Identifier(Symbol s) -> Identifier(Symbol(replacer s))
    | Power(f, n) ->
        Power
            (replaceVariableSymbol replacer f,
             replaceVariableSymbol replacer n)
    | Function(fn, f) ->
        Function(fn, replaceVariableSymbol replacer f)
    | Product l ->
        Product(List.map (replaceVariableSymbol replacer) l)
    | Sum l -> Sum(List.map (replaceVariableSymbol replacer) l)
    | FunctionN(fn, l) ->
        FunctionN(fn, List.map (replaceVariableSymbol replacer) l)
    | x -> x  

==========
Too unintuitive to use. Better to instead target using filters, optionally applying to only N elements 

let recursiveMapLocation depthonly filter depth breadth fx e =
    let rec loop d b =
        function
        | Identifier _ as var when d = depth && (depthonly || b = breadth)
                                    && filter var -> fx var
        | Power(f, n) when d = depth && (depthonly || b = breadth)
                            && filter (Power(f, n)) -> fx (Power(f, n))
        | Power(f, n) -> Power(loop (d + 1) 0 f, loop (d + 1) 1 n)
        | Function(fn, f) when d = depth && (depthonly || b = breadth)
                                && filter (Function(fn, f)) ->
            fx (Function(fn, f))
        | Function(fn, f) -> Function(fn, loop (d + 1) 0 f)
        | Product l when d = depth && (depthonly || b = breadth)
                            && filter (Product l) -> fx (Product l)
        | Product l -> Product(List.mapi (loop (d + 1)) l)
        | Sum l when d = depth && (depthonly || b = breadth) && filter (Sum l) ->
            fx (Sum l)
        | Sum l -> Sum(List.mapi (loop (d + 1)) l)
        | x -> x
    loop 0 0 e

let recursiveMapDepth filter depth fx e =
    recursiveMapLocation true filter depth 0 fx e

=================== 

 Interval math, use library don't reinvent wheel

 
type IntervalF(lower:float,upper:float) =
    member __.LowerBound = lower
    member __.UpperBound = upper
    member __.Value = (lower, upper)

    new(x) = IntervalF(x,x)
    static member (+) (l : IntervalF, r : IntervalF) =
         IntervalF(l.LowerBound + r.LowerBound, l.UpperBound + r.UpperBound)

    static member (-) (l : IntervalF, r : IntervalF) =
         IntervalF(l.LowerBound - r.UpperBound, l.UpperBound - r.LowerBound)

    static member (*) (l : IntervalF, r : IntervalF) =
        let product =
            [for x in [l.LowerBound; l.UpperBound] do
                for y in [r.LowerBound; r.UpperBound] ->
                    x*y]
        IntervalF(List.min product, List.max product)

    static member (/)  (l : IntervalF, r : IntervalF) =
        l * IntervalF (1./r.LowerBound, 1./r.UpperBound)

    static member Abs(x:IntervalF) =
        let abslb, absub = abs x.LowerBound, abs x.UpperBound
        if x.LowerBound = 0. || x.UpperBound = 0. then IntervalF(0., max abslb absub)
        else IntervalF(min abslb absub, max abslb absub)

    static member Zero = IntervalF(0.)

    override t.ToString() =
        string t.LowerBound + "," + string t.UpperBound

let rec replaceWithIntervals (defs : seq<Expression * IntervalF>) e =
    let map = dict defs
    let rec replace = function
        | IsRealNumber n ->
            IntervalF(n.ToFloat().Value)
            |> Some
        | Identifier _ as v when map.ContainsKey v -> Some map.[v]
        | Sum l ->
            List.map replace l
            |> List.filterMap Option.isSome Option.get
            |> List.sum
            |> Some
        | Product l ->
            List.map replace l
            |> List.filterMap Option.isSome Option.get
            |> List.fold (*) (IntervalF 1.)
            |> Some
        | FunctionN(Max, l) ->
            match l with
            | l' when (l' |> List.forall Expression.isRealNumber) ->
                let largest = l' |> List.map (fun x -> x.ToFloat().Value) |> List.max
                IntervalF largest
                |> Some
            | _ -> None
        | _ -> None
    replace e



 type InEquation(leq : Expression, req : Expression) =
     member __.Definition = leq, req
     member __.Left = leq
     member __.Right = req 
      
     static member (-) (eq : InEquation, expr : Expression) =
         InEquation(eq.Left - expr, eq.Right - expr)
     static member (+) (eq : InEquation, expr : Expression) =
         InEquation(eq.Left + expr, eq.Right + expr)
     static member (*) (eq : InEquation, expr : Expression) =
         InEquation(eq.Left * expr, eq.Right * expr)
     static member (/) (eq : InEquation, expr : Expression) =
         InEquation(eq.Left / expr, eq.Right / expr)
     static member Pow(e:InEquation, n : Expression) = 
         InEquation (e.Left ** n, e.Right ** n)
     static member Pow(e:InEquation, n : int) = 
         InEquation (e.Left ** n, e.Right ** n)
     override __.ToString() =
         let symbol = if expressionFormat = LatexFormat then " \\neq " else " ≠ "
         fmt leq + symbol + fmt req 
let (=/=) a b = InEquation(a,b)   

let equals a b = Equation(a, b)




let substitution substarget expr = 
    let usub = symbol "u_{sub}"
    let inner dx innerExpr =
        let du = D dx substarget
        let innerExprTemp = Expression.replaceExpressionWith usub substarget innerExpr
        if innerExprTemp <> innerExpr then
            let _, solvefor = Solving.reArrangeExprEquation false dx (substarget,usub) 
            let innerExpr' = Expression.replaceExpressionWith solvefor dx innerExprTemp 
            if innerExpr' <> innerExprTemp then 
                match integratePartialRes usub (du * innerExpr') with
                | res, true -> replaceSymbol substarget usub res
                | _, false -> expr  
            else expr
        else expr
    match expr with
    | IsIntegral(IsIntegral _, _) -> expr
    | IsIntegral(f,_) when substarget = f -> expr
    | IsIntegral(f, dx) -> inner dx f 
    | f -> f

let substitutionSteps substarget expr = 
    let usub = symbol "u_{sub}"
    let trace = StepTrace(sprintf "$%s$" (Expression.toFormattedString expr))
    let inner dx innerExpr =
        let du = D dx substarget
        let innerExprTemp = Expression.replaceExpressionWith usub substarget innerExpr  
        if innerExprTemp <> innerExpr then
            let _, solvefor = Solving.reArrangeExprEquation false dx (substarget,usub) 
            let innerExpr' = Expression.replaceExpressionWith solvefor dx innerExprTemp 
            if innerExpr' <> innerExprTemp then 
                trace.Add (dx <=> solvefor)
                trace.Add
                    ("${0}$. Therefore ${1}$, so $d{2} = {3}d{4}$",
                    [|  usub <=> substarget |> string;
                        diff dx usub <=> du |> string;
                        fmt (usub) ;
                        fmt du
                        fmt dx|])    
                let integrand = (du * innerExpr')
                trace.Add(integral usub innerExpr' <=> integral usub integrand)
                match integratePartialRes usub integrand with
                | res, true ->  
                    trace.Add res
                    replaceSymbol substarget usub res, trace
                | _, false -> trace.Add("failed"); expr, trace   
            else trace.Add("Substitution not possible"); expr, trace 
        else trace.Add("Substitution not possible"); expr, trace
    match expr with
    | IsIntegral(IsIntegral _, _) -> trace.Add("Nested, skipping"); expr, trace
    | IsIntegral(f,_) when substarget = f -> 
        trace.Add ("not a valid substitution")
        expr, trace
    | IsIntegral(f, dx) -> inner dx f 
    | f -> f, trace

    
    let mapAtDepth v f expr =
        let rec walk cv =  
            function 
            | x when cv = v ->  f x
            | Function(f, x) -> Function (f, walk (cv + 1) x)
            | Power(x, y) -> Power (walk (cv + 1) x, walk (cv + 2) y)
            | Product l -> Product (List.map (walk (cv + 1)) l)
            | Sum l -> Sum (List.map (walk (cv + 1)) l)
            | FunctionN(f, l) -> FunctionN (f, List.map (walk (cv + 1)) l)
            | Id x -> Id (walk (cv + 1) x)
            | x ->  x
        walk 0 expr

    let mapAtLoc h v f expr =
        let rec walk cv ch = function
        | x when ch = h && cv = v -> f x
        | Function(f, x) -> Function (f, walk (cv + 1) ch x)
        | Power(x, y) -> Power (walk (cv + 1) ch x, walk (cv + 2) ch y)
        | Product l -> Product (List.mapi (walk (cv + 1)) l)
        | Sum l -> Sum (List.mapi (walk (cv + 1)) l)
        | FunctionN(f, l) -> FunctionN (f, List.mapi (walk (cv + 1)) l)
        | Id x -> Id (walk (cv + 1) ch x)
        | x -> x
        walk 0 0 expr

==================


type PiSigma(expr) =
    member private __.op operator y = function
        | FunctionN(f, [fx;var;start; stop]) ->
            FunctionN(f, [operator fx y;var;start; stop])
        | x -> x

    static member Σ fx = FunctionN(SumOver, [fx])
    static member Σ (start:BigRational, fx) = FunctionN(SumOver, [fx;Vars.i;Number start; Vars.n])
    static member Σ (start:string, fx) = FunctionN(SumOver, [fx;Vars.i;symbol start; Vars.n])
    static member Σ (var, fx) = FunctionN(SumOver, [fx;var])
    static member Σ (start,stop,fx) = FunctionN(SumOver, [fx;Vars.i;start; stop])
    static member Σ (var,start,stop,fx) = FunctionN(SumOver, [fx;var;start;stop])
    static member Π fx = FunctionN(ProductOver, [fx])
    static member (/) (a:PiSigma, b : Expression) = b * (a.op (/) b a.Expression)

    static member Evaluate(expr, ?parameters) =
        match expr, parameters with
        | FunctionN(SumOver, [ fx; var; Number n; Number m ]), _ ->
            List.sum [ for i in n .. m -> replaceSymbolWith (Number i) var fx ]
        | FunctionN(ProductOver, [ fx; var; Number n; Number m ]), _ ->
            List.reduce (*) [ for i in n .. m -> replaceSymbolWith (Number i) var fx ]
        | FunctionN(SumOver as f, [ fx; var; a; b ]), Some p
        | FunctionN(ProductOver as f, [ fx; var; a; b ]), Some p ->
            let lookup = dict p

            let runvar e =
                e
                |> replaceSymbols [ for (a, b) in p -> a, Operators.fromRational b ]
                |> Expression.toRational 

            let n, m =
                match Expression.fullSimplify a, Expression.fullSimplify b with
                | Number n, Number m -> n, m
                | Number n, y -> n, runvar y
                | x, Number m -> lookup.[x], m
                | _ -> lookup.[a], runvar b

            match f with
            | SumOver ->
                List.sum [ for i in n .. m -> replaceSymbolWith (Number i) var fx ]
            | ProductOver ->
                List.reduce (*) [ for i in n .. m -> replaceSymbolWith (Number i) var fx ]
            | _ -> expr
        | FunctionN(f, [ fx; var; a; b ]), None ->
            match Expression.fullSimplify a, Expression.fullSimplify b with
            | Number n, Number m ->
                match f with
                | SumOver ->
                    List.sum [ for i in n .. m -> replaceSymbolWith (Number i) var fx ]
                | ProductOver ->
                    List.reduce (*) [ for i in n .. m -> replaceSymbolWith (Number i) var fx ]
                | _ -> expr
            | _ -> expr
        | _ -> expr
    member __.Expression = expr
    member __.Evaluate( ?parameters ) =
        match parameters with
        | None -> PiSigma.Evaluate(expr)
        | Some par -> PiSigma.Evaluate(expr, par)



